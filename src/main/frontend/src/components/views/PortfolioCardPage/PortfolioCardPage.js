// Î°úÍ∑∏Ïù∏Îêú ÌöåÏõêÎßå Î≥º Ïàò ÏûàÎäî ÌéòÏù¥ÏßÄ
import { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { Card, Row, Col, Divider, Button, Pagination } from 'antd';
import { request } from '../../../hoc/request';
import { lastVisitedEndpoint } from '../../../_actions/actions';
import { setLastVisitedEndpoint } from '../../../hoc/request';
import SearchInPortfolioCardPage from './SearchInPortfolioCardPage';


{/* postController - getFilteredPosts ÏøºÎ¶¨ Ï∞∏Í≥†ÌïòÍ∏∞ */}


function PortfolioCardPage() {
    const location = useLocation();
    const navigate = useNavigate();
    const dispatch = useDispatch();

    
    const [data, setData] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [recommend, setRecommend] = useState(0);
    const [selectedBanners, setSelectedBanners] = useState(['all']); // Ï≤òÏùå Ìï¥Îãπ ÌéòÏù¥ÏßÄÍ∞Ä settingÎê† ÎñÑÎäî ÏÑ†ÌÉùÎêú Î∞∞ÎÑàÍ∞Ä 'Ï†ÑÏ≤¥'Í∞Ä ÎêòÎèÑÎ°ù Ìï®
    const [currentPage, setCurrentPage] = useState(0); // Java Î∞è Spring BootÎ•º Ìè¨Ìï®Ìïú ÌéòÏù¥ÏßïÏùÄ ÏùºÎ∞òÏ†ÅÏúºÎ°ú 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎØÄÎ°ú Ï≤òÏùå Ïù¥ ÌéòÏù¥ÏßÄÍ∞Ä ÏÑ∏ÌåÖÎê† ÎñÑÎäî 0ÌéòÏù¥ÏßÄ(ÏÇ¨Ïã§ÏÉÅ 1ÌéòÏù¥ÏßÄ)Î°ú ÏÇºÏùå
    const [totalPages, setTotalPages] = useState(0); // ÎèôÏ†Å ÏøºÎ¶¨Î•º ÎÇ†Î†∏ÏùÑ Îïå Î∞±ÏóîÎìúÏóêÏÑú Ï£ºÎäî ÌòÑÏû¨ ÏÉÅÌÉúÏóêÏÑúÏùò total ÌéòÏù¥ÏßÄ Ïàò ÏÑ∏ÌåÖÏùÑ ÏúÑÌï®
    const [reload, setReload] = useState(0);



    const page = 0;
    const pageSize = 9;

    // USE EFFECT ###############################################


    useEffect(() => {
        setCurrentPage(0);
        setTotalPages(0);
        setSearchTerm("");
        setSelectedBanners(['all']);
        
        fetchUsers();
        setReload(0);
    }, [reload]);

    useEffect(()=>{
        Recommend();
    }, [recommend])

    useEffect(() => {
        console.log('ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î∞∞ÎÑà Ï†ïÎ≥¥', selectedBanners);
        console.log('ÌòÑÏû¨ Í≤ÄÏÉâÎêú ÌÇ§ÏõåÎìú: ', searchTerm);
        fetchUsers();
    }, [selectedBanners, currentPage, searchTerm]);

    

    // REQUEST ###############################################


    const Recommend = async() =>{
        try {
            

            const response = await request('GET', `/recommend`);
            setData(response.data); 
            setTotalPages(response.data.totalPages);
            console.log(data.content);
        } catch (error) {
            console.error("Î†àÏΩîÎ©òÎìú ÎÖ∏ÎÖ∏", error);
        }

    }
    const fetchUsers = async () => {

        try {
            const queryParams = new URLSearchParams({ //URLSearchParams Ïù¥ ÌÅ¥ÎûòÏä§Îäî URLÏóê ÎåÄÌïú ÏøºÎ¶¨ Îß§Í∞úÎ≥ÄÏàòÎ•º ÏûëÏÑ±ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Îç∞ ÎèÑÏõÄ. 'GET' ÏöîÏ≤≠Ïùò URLÏóê Ï∂îÍ∞ÄÎê† ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ÏùÑ ÎßåÎìúÎäî Îç∞ ÏÇ¨Ïö©Îê®.
                selectedBanners: selectedBanners.join(','), // selectedBanners Î∞∞Ïó¥ÏùÑ ÏâºÌëúÎ°ú Íµ¨Î∂ÑÎêú Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
                page: currentPage, //ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥
                size: pageSize, //ÌéòÏù¥ÏßïÏùÑ Ìï† ÌÅ¨Í∏∞(ÌòÑÏû¨Îäî ÌïúÌéòÏù¥ÏßÄÏóê 3Í∞úÏî©Îßå ÎÇòÏò§ÎèÑÎ°ù Íµ¨ÏÑ±ÌñàÏùå)
                searchTerm: searchTerm // Í≤ÄÏÉâÏñ¥ ÌÇ§ÏõåÎìú Î¨∏ÏûêÏó¥
            });

            const response = await request('GET', `/getCards?${queryParams}`);
            setData(response.data.content); 
            setTotalPages(response.data.totalPages);
            setRecommend(0);
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    };

    


    // HANDLER FUNCTIONS ###############################################

    // function name : onClickHandler
    const onClickHandler = (nickName) => {
        // /portfolio/${nickName}Î°ú Ïù¥ÎèôÌñàÏùÑ Îïå, Ìï¥Îãπ ÌéòÏù¥ÏßÄÏóêÏÑú "Î™©Î°ùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞" Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥,
        // Í∞ÄÏû• ÎßàÏßÄÎßâÏóê Ï†ÄÏû•Ìïú ÏóîÎìúÌè¨Ïù∏Ìä∏Ïù∏ /portfoliocardÎ°ú Ïò§Í≤åÎÅî dispatchÎ•º ÌÜµÌï¥ lastVisitedEndpointÎ•º /portfoliocardÎ°ú ÏÑ§Ï†ï
        dispatch(lastVisitedEndpoint('/portfoliocard'));  
        setLastVisitedEndpoint('/portfoliocard');
        // Error name : Actions must be plain objects. Instead, the actual type was: 'undefined'.
        // Solution : SetLastVisitedEndpoint is not a typical Redux action creator, cannot be stated in dispatch().
        navigate(`/portfolio/${nickName}`);
    }


    // function name : handleSearch
    // for Searching component
    const handleSearch = (value) => {
        setSearchTerm(value); // Í≤ÄÏÉâÏñ¥Î•º ÏÑ∏ÌåÖ
    };

    const onGetRecommend = async() => {
        
        setRecommend("please");

    };


    // function name ; handleProjectPage
    // <Button> ProjectÏùò Ìï∏Îì§Îü¨, ProjectPageÎ°ú Ïù¥Îèô
    const handleProjectPage = () => {
        navigate('/project'); 
    };

    const handleReload = () => {
        setReload(1);
    };


    // function name ; handleStudyPage
    // <Button> StudyÏùò Ìï∏Îì§Îü¨, StudyPageÎ°ú Ïù¥Îèô
    const handleStudyPage = () => {
        navigate('/study'); 
    };


    const toggleBanner = (banner) => {
        if (banner === 'all') { // ÎßåÏïΩ ÏÑ†ÌÉùÎêú Î∞∞ÎÑàÍ∞Ä Ï†ÑÏ≤¥ÎùºÎ©¥ selectedBanners: [all]
            setSelectedBanners(['all']);
        }
        else if (selectedBanners.includes('all')) { // ÎßåÏïΩ 'Ï†ÑÏ≤¥' ÏÉÅÌÉúÏóêÏÑú 'Ï†ÑÏ≤¥'Í∞Ä ÏïÑÎãå Îã§Î•∏ Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÎã§Î©¥, [all] -> [ÌäπÏ†ï Î∞∞ÎÑà]
            setSelectedBanners([banner]);
        }
        else { // Í∑∏ Ïô∏Ïùò Í≤ΩÏö∞
            const updatedBanners = selectedBanners.includes(banner) // ÎßåÏïΩ ÌôúÏÑ±ÌôîÎêú Î∞∞ÎÑàÎ•º Îã§Ïãú ÌÅ¥Î¶≠ÌñàÎã§Î©¥ Ìï¥Îãπ Î∞∞ÎÑàÎ•º ÏÉÅÌÉúÏóêÏÑú ÎπºÏ§òÏïºÌï®, ÎßåÏïΩ ÎπÑÌôúÏÑ±ÌôîÎêú Î∞∞ÎÑàÎ•º ÌÅ¥Î¶≠ÌïòÎ©¥ ÌòÑÏû¨ ÏÉÅÌÉúÏóêÏÑú ÏßÄÍ∏à ÌÅ¥Î¶≠Ìïú Î∞∞ÎÑàÎèÑ ÌòÑÏû¨ ÏÉÅÌÉúÏóê ÎÑ£Ïñ¥Ï§òÏïºÌï®
                ? selectedBanners.filter((b) => b !== banner)
                : [...selectedBanners, banner];
            // Check if all specific banners are unselected
            const allBannersUnselected = !['web', 'app', 'game', 'ai'].some(b => updatedBanners.includes(b)); // Î™®Îì† Î∞∞ÎÑàÍ∞Ä Ï†úÍ±∞ÎêòÏñ¥ÏûàÏúºÎ©¥ true , ÌïòÎÇòÎùºÎèÑ Î∞∞ÎÑàÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏñ¥ÏûàÏúºÎ©¥ false

            // If all specific banners are unselected, set selection to "all"
            setSelectedBanners(allBannersUnselected ? ['all'] : updatedBanners); //ÎßåÏïΩ ÏÑ†ÌÉùÎêú Î∞∞ÎÑàÎ•º Îã§ ÎπÑÌôúÏÑ±Ìôî ÌïòÎ©¥ 'Ï†ÑÏ≤¥' ÏÉÅÌÉúÎ°ú Í∞ê
        }

        setCurrentPage(0); // ÎßåÏïΩ Î∞∞ÎÑàÎ•º Îã§Î•∏ Í±∏ Í≥†Î•¥Î©¥ 1ÌéòÏù¥ÏßÄÎ°ú Í∞ïÏ†ú Ïù¥ÎèôÏãúÌÇ¥
    }


    const onRecommend = () =>{
        setRecommend(1);
    };


    // COMPONENTS ###############################################

    // renderCards
    const renderCards = (cards) => {
        if (!cards || cards.length === 0) {
            return <div>No data available</div>; // or any other appropriate message
        }
        
        return (
            <div>
                <Row gutter={16}>
                    {cards.map((item,index) => (

                        <Col xs={24} sm={8} key={index}>
                            <Card onClick={()=> onClickHandler(item.nickName)} title={`üë©üèª‚Äçüíª ${item.nickName}`} style={{ height:'270px', marginTop: '20px', cursor: 'pointer' }}>
                                {/* style = {{cursor: 'pointer'}} */ }
                                <b>Field Of Interests</b>
                                <br></br>
                                {item.web ? "Web " : ""}{item.app ? "App " : ""}{item.game ? "Game " : ""}{item.ai ? "AI " : ""}
                                <Divider></Divider>
                                <b>Brief Introduction</b>
                                <br></br>
                                {item.shortIntroduce}
                            </Card>
                        </Col>
                    ))}
                </Row>
            </div>
        )
    }



    // RETURN ####################################################################################
    // RETURN ####################################################################################
    return (
        <div>
            <div>
                <SearchInPortfolioCardPage setSearchTerm={handleSearch} /> 
            </div>
            <div>
                <Button type={selectedBanners.includes('all') ? 'primary' : 'default'}
                        onClick={() => toggleBanner('all')}
                        style={{ marginRight: '10px' }}>
                    All
                </Button>
                <Button
                        type={selectedBanners.includes('web') ? 'primary' : 'default'}
                        onClick={() => toggleBanner('web')}>
                    Web
                </Button>
                <Button
                        type={selectedBanners.includes('app') ? 'primary' : 'default'}
                        onClick={() => toggleBanner('app')}>
                    App
                </Button>
                <Button
                        type={selectedBanners.includes('game') ? 'primary' : 'default'}
                        onClick={() => toggleBanner('game')}>
                    Game
                </Button>
                <Button
                        type={selectedBanners.includes('ai') ? 'primary' : 'default'}
                        onClick={() => toggleBanner('ai')}>
                    AI
                </Button>
            </div>
            <div style={{ textAlign: 'left', margin: "0 0", marginTop:'15px'}}>
                {/** ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä localhost:3000/projectÏù¥Î©¥ primaryÌòïÏãùÏúºÎ°ú Î≤ÑÌäº ÌëúÏãú, Îã§Î•∏ Í≤ΩÎ°úÎùºÎ©¥ defaultÎ°ú ÌëúÏãú */}
                <Button type={location.pathname === '/portfoliocard' ? 'primary' : 'default'} onClick={handleReload} >
                    Protfolio Card
                </Button>
                <Button type={location.pathname === '/project' ? 'primary' : 'default'} onClick={handleProjectPage} >
                    Project
                </Button>
                <Button type={location.pathname === '/study' ? 'primary' : 'default'} onClick={handleStudyPage}>
                    Study
                </Button>
                <Button onClick={onRecommend} >
                    RECOMMEND
                </Button>
                <Divider></Divider>
            </div>
            <div>
            {renderCards(data)}
            </div>
            <div style={{ textAlign: 'center', margin: '20px 0' }}>
                <Pagination
                    current={currentPage + 1} // Ant Design's Pagination starts from 1, while your state starts from 0
                    total={totalPages * pageSize}
                    pageSize={pageSize}
                    onChange={(page) => setCurrentPage(page - 1)} //ÏÇ¨Ïö©ÏûêÍ∞Ä Ìï¥Îãπ Î≤ÑÌäº (Ïòà: 2Î≤à Î≤ÑÌäº)ÏùÑ ÎàÑÎ•¥Î©¥ currentPageÎ•º 1Î°ú ÏÑ∏ÌåÖÌïòÏó¨ Î∞±ÏóîÎìúÏóê ÏöîÏ≤≠ Î≥¥ÎÉÑ(Î∞±ÏóîÎìúÎäî ÌîÑÎü∞Ìä∏ÏóêÏÑú Î≥¥Îäî ÌéòÏù¥ÏßÄÎ≥¥Îã§ ÌïòÎÇò Ï†ÅÏùÄ ÏàòÎ∂ÄÌÑ∞ ÌéòÏù¥ÏßïÏùÑ ÏãúÏûëÌïòÎØÄÎ°ú)
                />
            </div>
        </div>
    );
}


export default PortfolioCardPage;


